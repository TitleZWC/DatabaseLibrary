package com.titlezwc.moment;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.titlezwc.moment.AppInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PackageName = new Property(0, String.class, "PackageName", false, "PACKAGE_NAME");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(2, String.class, "AppName", false, "APP_NAME");
        public final static Property VersionName = new Property(3, String.class, "versionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(4, Integer.class, "versionCode", false, "VERSION_CODE");
        public final static Property VersionCodeUpdate = new Property(5, Integer.class, "versionCodeUpdate", false, "VERSION_CODE_UPDATE");
        public final static Property VisitTimes = new Property(6, Integer.class, "VisitTimes", false, "VISIT_TIMES");
        public final static Property UseTime = new Property(7, Long.class, "UseTime", false, "USE_TIME");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
    };


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"PACKAGE_NAME\" TEXT," + // 0: PackageName
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: id
                "\"APP_NAME\" TEXT," + // 2: AppName
                "\"VERSION_NAME\" TEXT," + // 3: versionName
                "\"VERSION_CODE\" INTEGER," + // 4: versionCode
                "\"VERSION_CODE_UPDATE\" INTEGER," + // 5: versionCodeUpdate
                "\"VISIT_TIMES\" INTEGER," + // 6: VisitTimes
                "\"USE_TIME\" INTEGER," + // 7: UseTime
                "\"DATE\" INTEGER);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        String PackageName = entity.getPackageName();
        if (PackageName != null) {
            stmt.bindString(1, PackageName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String AppName = entity.getAppName();
        if (AppName != null) {
            stmt.bindString(3, AppName);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(4, versionName);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(5, versionCode);
        }
 
        Integer versionCodeUpdate = entity.getVersionCodeUpdate();
        if (versionCodeUpdate != null) {
            stmt.bindLong(6, versionCodeUpdate);
        }
 
        Integer VisitTimes = entity.getVisitTimes();
        if (VisitTimes != null) {
            stmt.bindLong(7, VisitTimes);
        }
 
        Long UseTime = entity.getUseTime();
        if (UseTime != null) {
            stmt.bindLong(8, UseTime);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PackageName
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AppName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // versionName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // versionCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // versionCodeUpdate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // VisitTimes
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // UseTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setPackageName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersionName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersionCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVersionCodeUpdate(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setVisitTimes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUseTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
